/*  
 * 문제 요약
 *     - 3×n 크기의 바닥을 2×1 타일로 가득 채우는 경우의 수를 구함
 *     - n이 홀수면 채울 수 없음
 *     - 경우의 수가 커질 수 있어 1,000,000,007로 나눈 나머지를 반환
 *
 * 입력  
 *     - n: 가로 길이 (1 ≤ n ≤ 5000)
 *
 * 출력  
 *     - 3×n 타일링의 경우의 수 (mod 1,000,000,007)
 *
 * 핵심 포인트  
 *     - n이 홀수일 경우 경우의 수 0
 *     - 점화식 구성:
 *         dp[i] = dp[i-2] * 3 + (dp[i-4] + dp[i-6] + ...) * 2 + 2
 *         → (dp[i-4] + dp[i-6] + ...) 누적합을 sum으로 관리
 *     - sum*2: 과거의 특수 패턴들을 확장하는 경우의 수
 */

class Solution {
	
	public int solution(int n) {
		if (n % 2 == 1) return 0; // 홀수는 불가능
		
		long[] dp = new long[n + 1];
		long sum = 0;
		dp[2] = 3; // n=2일 때 경우의 수
		
		for (int i = 4; i <= n; i += 2) {
			dp[i] = (dp[i - 2] * 3 + sum * 2 + 2) % 1_000_000_007;
			sum += dp[i - 2]; // 과거 특수 패턴 누적
		}
		
		return (int) dp[n];
	}
	
}
