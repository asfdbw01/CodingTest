/*  
 * 문제 요약
 *     - 2×n 크기의 바닥을 2×1 타일로 채우는 경우의 수를 구함
 *     - 타일은 가로 또는 세로로 배치 가능
 *     - 경우의 수가 커질 수 있으므로 1,000,000,007로 나눈 나머지를 반환
 *
 * 입력  
 *     - n: 가로 길이 (1 ≤ n ≤ 60,000)
 *
 * 출력  
 *     - 2×n 타일링의 경우의 수 (mod 1,000,000,007)
 *
 * 핵심 포인트  
 *     - n이 1이면 1, n이 2이면 2가 기본값
 *     - 점화식: dp[i] = dp[i-1] + dp[i-2]
 *         → 마지막에 세로 타일 1개를 놓거나, 가로 타일 2개를 놓는 경우
 *     - 모듈러 연산으로 오버플로우 방지
 */

class Solution {
	
	public int solution(int n) {
		// n이 1 또는 2인 경우는 경우의 수가 n과 동일
		if (n <= 2) return n;
		
		// dp[i]: 2×i 크기의 타일링 경우의 수
		long[] dp = new long[n + 1];
		dp[1] = 1; // 세로 타일 1개
		dp[2] = 2; // 세로 타일 2개 또는 가로 타일 2개
		
		// 점화식에 따라 dp 테이블 채우기
		for (int i = 3; i <= n; i++) {
			dp[i] = dp[i - 1] + dp[i - 2]; // 세로 1개 추가 or 가로 2개 추가
			dp[i] %= 1_000_000_007; // 오버플로우 방지
		}
		
		// 최종 결과 반환
		return (int) dp[n];
	}
	
}
