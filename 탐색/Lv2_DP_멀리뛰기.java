/*  
 * 문제 요약
 *     - 효진이는 한 번에 1칸 또는 2칸을 뛸 수 있으며,
 *       총 n칸의 마지막 칸에 도달하는 방법의 수를 구함
 *
 * 입력  
 *     - int n: 1 이상 2000 이하
 *
 * 출력  
 *     - 마지막 칸에 도달하는 모든 방법의 수 % 1234567
 *
 * 핵심 포인트  
 *     - n번째 칸에 도달하는 경우는 (n-1)에서 1칸 뛰기 + (n-2)에서 2칸 뛰기
 *     - 점화식: dp[i] = dp[i - 1] + dp[i - 2]
 *     - 중간중간 1234567로 나눠 오버플로우 방지
 */

class Solution {
	
	public long solution(int n) {
		if (n <= 2) return n; // 예외 케이스: 1칸 → 1, 2칸 → 2
		
		long[] dp = new long[n + 1];
		dp[1] = 1L;
		dp[2] = 2L;
		
		// 점화식 적용: dp[i] = dp[i-1] + dp[i-2]
		for (int i = 3; i <= n; i++) {
			dp[i] = (dp[i - 1] + dp[i - 2]) % 1234567;
		}
		
		return dp[n];
	}
	
}
