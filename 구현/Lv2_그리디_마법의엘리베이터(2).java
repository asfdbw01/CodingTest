/*
 * 문제 요약
 *     - 현재 층 storey에서 0층으로 이동할 때, 마법의 버튼을 최소한으로 눌러야 함
 *     - 버튼은 +1, -1, +10, -10, ... +10^c, -10^c (c ≥ 0)의 형태로 존재함
 *     - 한 번 버튼을 누를 때마다 마법의 돌 1개가 소모됨
 *     - 버튼 조합을 잘 선택해 최소한의 마법의 돌로 0층까지 이동해야 함
 *
 * 입력
 *     - storey: 현재 민수가 위치한 층 (1 ≤ storey ≤ 100,000,000)
 *
 * 출력
 *     - 마법의 돌을 최소로 사용하여 0층에 도달하는 버튼 누름 횟수
 *
 * 핵심 포인트
 *     - 각 자릿수를 기준으로 올림(carry) 또는 내림(floor) 중 더 적은 비용 선택
 *     - 5의 경우는 다음 자리 수를 보고 결정 (그리디 조건 분기)
 *     - 반올림을 하면서 다음 자릿수로 올림 carry를 넘기는 방식
 *     - 십진수 각 자릿수를 뒤에서부터 처리하며 전체 최소 횟수 계산
 */

class Solution {
	
	public int solution(int storey) {
		int cnt = 0;

		// 각 자릿수별로 올릴지 내릴지를 결정하면서 최소 비용 누적
		while (storey != 0) {
			int n = storey % 10;  // 현재 자리의 숫자
			storey /= 10;         // 상위 자리로 이동

			if (n == 0) continue;  // 0이면 무시

			else if (n < 5) {
				// 내리는 것이 유리한 경우
				cnt += n;
			}
			else if (n > 5) {
				// 올리는 것이 유리 → 올림 처리
				cnt += 10 - n;
				storey++;  // 다음 자리에 올림 carry
			}
			else {
				// n == 5인 경우 → 다음 자리 기준으로 판단
				cnt += 5;
				if (storey % 10 >= 5) storey++;  // 다음 자리가 5 이상이면 올림
			}
		}
		
		return cnt;
	}
}
